"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[194],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),b=a,f=m["".concat(c,".").concat(b)]||m[b]||s[b]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4160:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o=void 0,l={permalink:"/EF-Informatik/Numtrip-blog",editUrl:"https://github.com/Grashaum/EF-Informatik/tree/main/blog/Numtrip-blog.md",source:"@site/blog/Numtrip-blog.md",title:"Numtrip-blog",description:"Benutzeringabe",date:"2023-03-17T15:28:29.000Z",formattedDate:"17. M\xe4rz 2023",tags:[],readingTime:.75,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"2.12.2022",permalink:"/EF-Informatik/2.12.2022"},nextItem:{title:"Finaler Blog-Beitrag",permalink:"/EF-Informatik/finaler game-blog"}},c={authorsImageUrls:[]},u=[{value:"Benutzeringabe",id:"benutzeringabe",level:3}],p={toc:u};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"benutzeringabe"},"Benutzeringabe"),(0,a.kt)("p",null,"Als 1. habe ich mir ein Konzept \xfcberlegt, die Koordinaten eines bestimmten Feldes zu definieren. Ich bin auf Koordinaten aus Zahlen und Buchstaben gekommen. So ist es f\xfcr mich pers\xf6hnlich praktischer, die Zeilen und Spalten zu unterscheiden (Spalten: Buchst., Zeilen: Zahlen)"),(0,a.kt)("p",null,"Die Beiden eingaben m\xfcssen noch validiert werden:\ndaf\xfcr habe ich mich entschieden, f\xfcr beide eine einzelne Funktion zu schreiben, was f\xfcr einige schwierigkeiten gef\xfchrt hat, da ich die ganze formel zweimal schreiben musste... es hat nach ein paar versuchen jedoch geklappt."),(0,a.kt)("p",null,"in der Funktion auswerten werden die Buchstaben in Zahlen umbewandelt"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"def auswerten(zeile, spalte):"),(0,a.kt)("p",{parentName:"blockquote"},"   buchstaben = ","['A', 'B', 'C', 'D', 'E', 'F']"),(0,a.kt)("p",{parentName:"blockquote"},"   spalte = buchstaben.index(spalte.upper())\nzeile = int(zeile) - 1"),(0,a.kt)("p",{parentName:"blockquote"},"   print(zeile)"),(0,a.kt)("p",{parentName:"blockquote"},"   board","[zeile][spalte]"," = 0")),(0,a.kt)("p",null,"In der Funktion Play wird alles noch einmal aufgerufen"),(0,a.kt)("p",null,"in der Funktion ... wird geschaut, ob die benachbarten Zellen die gleiche zahl beinhalten"))}s.isMDXComponent=!0}}]);